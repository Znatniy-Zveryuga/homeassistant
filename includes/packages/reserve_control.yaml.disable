group:
  active_automations:
    entities:
      - automation.ha_persistent_notification
      - automation.hacs_persistent_notification
      - automation.ha1_server_off_reserve_control
      - automation.check_ha1_on_start
      - automation.sync_input_boolean
      - automation.sync_thermostat_temperature
      - automation.system_start
      - automation.system_error_counter
      - automation.system_warning_counter
      - automation.reset_system_counters
      - automation.gas_counter
      - automation.zigbe2mqtt_log_level
      - automation.zigbee_join_enabled
      - automation.zigbee_join_disabled
      - automation.zigbee2mqtt_create_notification_on_successfull_interview
      - automation.zigbee_publish_birth_message
      - automation.zigbee_kitchen_button_single

sensor:
  - platform: rest
    resource_template: "{{ states('input_text.ha1_url') }}api/states/input_boolean.pump_schedule"
    name: ha1_pump_schedule
    headers:
      authorization: !secret ha1_token
    value_template: "{{ value_json.state }}"

  - platform: rest
    resource_template: "{{ states('input_text.ha1_url') }}api/states/input_boolean.gas_boiler_schedule"
    name: ha1_gas_boiler_schedule
    headers:
      authorization: !secret ha1_token
    value_template: "{{ value_json.state }}"

  - platform: rest
    resource_template: "{{ states('input_text.ha1_url') }}api/states/input_boolean.auto_turn_off_lights"
    name: ha1_auto_turn_off_lights
    headers:
      authorization: !secret ha1_token
    value_template: "{{ value_json.state }}"

  - platform: rest
    resource_template: "{{ states('input_text.ha1_url') }}api/states/input_boolean.auto_fan"
    name: ha1_auto_fan
    headers:
      authorization: !secret ha1_token
    value_template: "{{ value_json.state }}"

  - platform: rest
    resource_template: "{{ states('input_text.ha1_url') }}api/states/input_boolean.vacuum_schedule"
    name: ha1_vacuum_schedule
    headers:
      authorization: !secret ha1_token
    value_template: "{{ value_json.state }}"

  - platform: rest
    resource_template: "{{ states('input_text.ha1_url') }}api/states/input_boolean.vacuum_notification"
    name: ha1_vacuum_notification
    headers:
      authorization: !secret ha1_token
    value_template: "{{ value_json.state }}"

  - platform: rest
    resource_template: "{{ states('input_text.ha1_url') }}api/states/climate.gas_boiler"
    name: ha1_thermostat_temperature
    headers:
      authorization: !secret ha1_token
    value_template: "{{ value_json.attributes.temperature }}"

rest_command:
  ha1_set_input_boolean:
    url: "{{ states('input_text.ha1_url') }}api/services/input_boolean/turn_{{ set_state }}"
    method: POST
    headers:
      authorization: !secret ha1_token
    payload: '{"entity_id":"{{ set_entity_id }}"}'

automation:
  - alias: turn_off_automation
    initial_state: 'on'
    trigger:
      - platform: homeassistant
        event: start
    action:
      - service: automation.turn_off
        entity_id: all
      - delay: 00:00:30
      - service: automation.turn_on
        entity_id: group.active_automations

  - alias: ha1_server_on_return_control
    initial_state: 'on'
    trigger:
      - platform: state
        entity_id: sensor.ha1_uptime
        from: "unavailable"
        for: "00:01:00"
    action:
      - service: notify.telegram
        data_template:
          message: '{{ states.sensor.date_time.state }} | Заработал HA1. Отдаю управление главному!'
      - service: rest_command.ha1_set_input_boolean
        data_template:
          set_entity_id: "input_boolean.pump_schedule"
          set_state: "{{ states('input_boolean.pump_schedule') }}"
      - service: automation.turn_off
        entity_id: all
      - service: script.turn_on
        entity_id: script.sync_input_boolean_to_ha1
      - delay: 00:00:30
      - service: automation.turn_on
        entity_id: group.active_automations

  - alias: check_ha1_on_start
    initial_state: 'on'
    trigger:
      platform: homeassistant
      event: start
#     platform: time_pattern
#     minutes: '/1'
    condition:
      condition: template
      value_template: "{{ states.sensor.ha1_uptime is none }}"
    action:
      - service: notify.telegram
        data_template:
          message: '{{ states.sensor.date_time.state }} | Не работает HA1. Беру управление на себя!'
      - service: automation.turn_on
        entity_id: all

  - alias: ha1_server_off_reserve_control
    initial_state: 'on'
    trigger:
      - platform: state
        entity_id: sensor.ha1_uptime
        to: "unavailable"
        for: "00:01:00"
    action:
      - service: notify.telegram
        data_template:
          message: '{{ states.sensor.date_time.state }} | Не работает HA1. Беру управление на себя!'
      - service: automation.turn_on
        entity_id: all

  - alias: sync_input_boolean
    initial_state: 'on'
    trigger:
      platform: state
      entity_id:
        - sensor.ha1_pump_schedule
        - sensor.ha1_gas_boiler_schedule
        - sensor.ha1_auto_turn_off_lights
        - sensor.ha1_auto_fan
        - sensor.ha1_vacuum_schedule
        - sensor.ha1_vacuum_notification
    condition:
      - condition: numeric_state
        entity_id: sensor.ha1_uptime
        above: 120
    action:
      service_template: >
        {% if trigger.to_state.state == 'on' and trigger.from_state.state == 'off' %}
          input_boolean.turn_on
        {% elif trigger.to_state.state == 'off' and trigger.from_state.state == 'on' %}
          input_boolean.turn_off
        {% else %}
          {{ trigger.to_state }}
        {% endif %}
      data_template:
        entity_id: >
          {% if trigger.entity_id == 'sensor.ha1_pump_schedule' %}
            input_boolean.pump_schedule
          {% elif trigger.entity_id == 'sensor.ha1_gas_boiler_schedule' %}
            input_boolean.gas_boiler_schedule
          {% elif trigger.entity_id == 'sensor.ha1_auto_turn_off_lights' %}
            input_boolean.auto_turn_off_lights
          {% elif trigger.entity_id == 'sensor.ha1_auto_fan' %}
            input_boolean.auto_fan
          {% elif trigger.entity_id == 'sensor.ha1_vacuum_schedule' %}
            input_boolean.vacuum_schedule
          {% elif trigger.entity_id == 'sensor.ha1_vacuum_notification' %}
            input_boolean.vacuum_notification
          {% endif %}

  - alias: sync_thermostat_temperature
    initial_state: 'on'
    trigger:
      platform: state
      entity_id: sensor.ha1_thermostat_temperature
    condition:
      - condition: numeric_state
        entity_id: sensor.ha1_thermostat_temperature
        below: 40
    action:
      - service: climate.set_temperature
        data_template:
          entity_id: climate.gas_boiler
          temperature: "{{ states('sensor.ha1_thermostat_temperature') | float }}"

script:
  sync_input_boolean_to_ha1:
    alias: "Sync input_boolean state to ha1"
    sequence:
      - service: rest_command.ha1_set_input_boolean
        data_template:
          set_entity_id: input_boolean.pump_schedule
          set_state: "{{ states('input_boolean.pump_schedule') }}"
      - service: rest_command.ha1_set_input_boolean
        data_template:
          set_entity_id: input_boolean.gas_boiler_schedule
          set_state: "{{ states('input_boolean.gas_boiler_schedule') }}"
      - service: rest_command.ha1_set_input_boolean
        data_template:
          set_entity_id: input_boolean.auto_turn_off_lights
          set_state: "{{ states('input_boolean.auto_turn_off_lights') }}"
      - service: rest_command.ha1_set_input_boolean
        data_template:
          set_entity_id: input_boolean.auto_fan
          set_state: "{{ states('input_boolean.auto_fan') }}"
      - service: rest_command.ha1_set_input_boolean
        data_template:
          set_entity_id: input_boolean.vacuum_schedule
          set_state: "{{ states('input_boolean.vacuum_schedule') }}"
      - service: rest_command.ha1_set_input_boolean
        data_template:
          set_entity_id: input_boolean.vacuum_notification
          set_state: "{{ states('input_boolean.vacuum_notification') }}"

